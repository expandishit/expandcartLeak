{% extends "base.expand" %}
{% import "controls/forms.expand" as forms %}

{% set hideHeader = true %}

{% block content %}
    <style>
        .page-header-default {
            background-color: transparent;
        }
        .page-header-content + .breadcrumb-line {
            border: 0;
        }
    </style>

    <div class="list-wrapper">
        <div class="inner-settings-title mb-10 orders-title">
            <h4 class="fb-app-title">
                {{lang('heading_title')}}
            </h4>
            <div class="btns ">
                <a href="" class="theme-btn rounded-primary-btn user {{ limit_reached ? 'plan-lock-btn' : '' }}"
                        {% if not limit_reached %}
                            data-toggle="modal" data-target="#add_user_modal"
                        {% endif %}
                   id="add_user_btn">
                    <b>
                        {% if limit_reached %}
                            <i class="fas fa-lock"></i> &nbsp;
                        {% endif %}
                    </b> 
                    {{ lang('btn_new_user') }}
                </a>
                <a href="{{ link('user/user_permission/insert') }}"
                   class="theme-btn rounded-primary-btn role hide {{ limit_reached ? 'plan-lock-btn' : '' }}">
                    <b>
                        {% if limit_reached %}
                            <i class="fas fa-lock"></i> &nbsp;
                        {% endif %}
                    </b> 
                    {{ lang('btn_new_user_group') }}
                </a>
            </div>
        </div>

        {% if limit_reached %}
            <div class="domain-alert-box mb-20">
                <p class="first-ship-alert ai-center no-margin w-100">
                    <i class="fas fa-exclamation-triangle"></i> &nbsp;&nbsp;
                    <span class="w-100 gray-color font-13 m-bold">{{lang_printf('text_limit_reached', link('account/charge'))}}</span>
                </p>
            </div>
        {% endif %}

        <div class="page-tabs-container">
            <div class="navigation-tabs-wrapper">
                <ul class="navigation-tabs" id="user_tabs">
                    <li class="active">
                        <a href="#user">
                            {{lang('text_users')}} 
                        </a>
                    </li>
                    <li class="">
                        <a href="#role">
                            {{lang('text_roles')}} 
                        </a>
                    </li>
                </ul>
            </div>

            <div class="tabs-content-wrapper tab-content">
                <div class="page-loader">
                    <div class="blocks">
                        <div class="block orange"></div>
                        <div class="block blue"></div>
                    </div>
                </div>
                <!-- Users -->
                <div class="tab-pane active" id="user" role="tabpanel">
                    <div class="features-table-container">
                        <table id="datatable-countries" class="table table-hover datatable-highlight">
                            <thead>
                            <tr>
                                <th></th>
                                <th>{{ lang('column_username') }}</th>
                                <th>{{ lang('column_group_name') }}</th>
                                <th>{{ lang('column_date_added') }}</th>
                                <th>{{ lang('column_status') }}</th>
                                <th></th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
                <!-- /Users -->

                <!-- Permissions -->
                <div class="tab-pane" id="role" role="tabpanel">
                    <div class="features-table-container">
                        <table id="datatables_permissions" class="table table-hover datatable-highlight">
                            <thead>
                            <tr>
                                <th></th>
                                <th>{{ lang('column_name', 'user/user_group') }}</th>
                                <th>{{ lang('description', 'user/user_group') }}</th>
                                <th>{{ lang('created_at', 'user/user_group') }}</th>
                                <th></th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
                <!-- /Permissions -->
            </div>
        </div>
    </div>
    {# {% if base.currentplan != '3' %} #}
    <!-- Add User Modal -->
    <div class="modal fade add-user-modal center-modal" id="add_user_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="head">
                    <p class="title">
                        {{ lang('btn_new_user') }}
                    </p>
                    <button type="button" class="close-modal" data-dismiss="modal" aria-label="Close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <!-- Start Form -->
                <form id="setting-payment" class="form" action="user/user/insert">
                    <label class="user-img">
                        <input type="file" class="hide" name="">
                        <i class="far fa-edit"></i>
                    </label>
                    <div class="row">
                        <!-- Username -->
                        <div class="form-group col-md-12" id="username-group">
                            <input type="text" class="form-control" id="username" name="username" value="{{ username }}" placeholder="{{ lang('entry_username') }} *">
                            <span class="help-block"></span>
                        </div>
                        <!-- /Username -->
                        <!-- First Name -->
                        <div class="form-group col-md-6" id="firstname-group">
                            <input type="text" class="form-control" id="firstname" name="firstname" value="{{ firstname }}" placeholder="{{ lang('entry_firstname') }} *">
                            <span class="help-block"></span>
                        </div>
                        <!-- /First Name -->
                        <!-- Last Name -->
                        <div class="form-group col-md-6" id="lastname-group">
                            <input type="text" class="form-control" id="lastname" name="lastname" value="{{ lastname }}" placeholder="{{ lang('entry_lastname') }} *">
                            <span class="help-block"></span>
                        </div>
                        <!-- /Last Name -->
                        <!-- Email -->
                        <div class="form-group col-md-12" id="email-group">
                            <input type="text" class="form-control" id="email" name="email" value="{{ email }}" placeholder="{{ lang('entry_email') }} *">
                            <span class="help-block" id="email-help-block"></span>
                        </div>
                        <!-- /Email -->
                        <!-- User Group -->
                        <div class="form-group col-md-12" id="user_group_id-group">
                            <select name="user_group_id" id="user_group_id" class="form-control">
                                <option></option>
                                {% for user_group in user_groups %}
                                    <option value="{{ user_group['user_group_id'] }}" {% if user_group_id == user_group['user_group_id'] %} selected {% endif %}> 
                                        {{ user_group['name'] }} 
                                    </option>
                                {% endfor %}
                            </select>
                            <span class="help-block"></span>
                            <span class="text-muted">{{ langempty('entry_order_status_help') }}</span>
                        </div>
                        <!-- /User Group -->
                        <!-- Password -->
                        <div class="form-group col-md-6" id="password-group">
                            <input type="password" class="form-control" id="password" name="password" value="{{ password }}" placeholder="{{ lang('entry_password') }} *">
                            <span class="help-block"></span>
                        </div>
                        <!-- /Password -->
                        <!-- Password Confirm -->
                        <div class="form-group col-md-6" id="confirm-group">
                            <input type="password" class="form-control" id="confirm" name="confirm" value="{{ confirm }}" placeholder="{{ lang('entry_confirm') }} *">
                            <span class="help-block"></span>
                        </div>
                        <!-- /Password Confirm -->
                        {% if show_outlet %}
                        <div class="form-group col-md-12">
                            <select name="outlet_id" id="input-user-group" class="form-control select">
                                <option value="0" selected="selected">{{ lang('none_assign') }}</option>
                                {% for outlet in outlets %}
                                    {% if outlet['outlet_id'] == outlet_id %}
                                        <option value="{{ outlet['outlet_id'] }}" selected="selected">{{ outlet['name'] }}</option>
                                    {% else %}
                                        <option value="{{ outlet['outlet_id'] }}">{{ outlet['name'] }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </div>
                        {% endif %}
                        
                    </div>
                    <div class="btns">
                        <button type="button" class="button cancel" data-dismiss="modal" aria-label="Close">
                            {{lang('btn_cancel')}}
                        </button>
                        <button class="button submit">
                            {{lang('btn_create')}}
                        </button>
                    </div>
                </form>
                <!-- End Form -->

            </div>
        </div>
    </div>
    {# {% endif %} #}

{% endblock content %}

{% block scripts %}
    {{ parent() }}
    {% import _self as dtControls %}
    <script>
        $(document).ready(function() {
            $.extend($.fn.dataTable.defaults, {
                autoWidth: false,
                dom: '<"datatable-header"fBl><"datatable-scroll"t><"datatable-footer"ip>',
                language: locales['dt_language'],
                lengthMenu: [[10, 25, 50, 100, 200], [10, 25, 50, 100, 200]]
            });
        });

        var dt;
        $(document).ready(function()
        {

            // Countries
            dt = $('#datatable-countries').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                language: {
                    ...locales['dt_language'],
                    search: ''
                },
                dom: '<"datatable-header"fB><"datatable-scroll"t><"datatable-footer"lip>',
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                drawCallback: function () {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                },
                preDrawCallback: function() {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                },
                "ajax": {
                    url: '{{ link('user/user/dtUserHandler') }}',
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: `<i class='far fa-trash-alt'></i> {{lang('dtb_delete')}}`,
                        className: 'bulk-delete disabled',
                        action: function(e, dt, node, config) {
                            var selectedRows = dt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item.user_id);
                            });
                            // console.log(selectedIds);
                            if (selectedIds.length > 0){
                                 if(selectedIds.includes('1'))
                                {swal({ title: "{{ lang('protected_user') }}", type: "warning", closeOnConfirm: true  })
                                }else{
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link('user/user/delete') }}',
                                        type: 'post',
                                        data: {ids: selectedIds},
                                        success: function(){
                                            reloadDT();
                                        }
                                    });
                                });
                                }
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: `<i class="fas fa-file-download"></i> {{lang('dtb_export_table')}}`,
                        className: `dt-list btn-export {{base.plan_trial_id == 3 ? "disabled plan-lock-btn" : ""}}`,
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                ],

                columns: [
                    {
                        title:`<input type="checkbox" class="styled" onchange='toggleSelectAll(this);'>`,
                        orderable: false,
                        data: "user_id",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "username",
                        
                        render: function (data, type, row) {
                            return `<a data-userid="${row['user_id']}" class="update-user-link">${row['username']}</a>`;   
                        }
                    },
                    {
                        data: 'group_name',
                    },
                    {data: "date_added"},
                    {data: "status"},
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 4,
                        render: function (data, type, row) {
                            var status = (data == "1" ? 'checked="checked"' : '');
                            console.log(row)
                            return statusSwitch(row.user_id, status, row.limit_reached == 1);
                        }
                    },
                    {
                        targets: 5,
                        orderable: false,
                        render: function (data, type, row) {
                            let tmp = `<ul class="icons-list pull-right">
                                    <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-menu9"></i>
                                        </a>
                                        <ul class="dropdown-menu dropdown-menu-right">`;
                                tmp += `<li><a data-userid="${row['user_id']}" class="update-user-link"><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>`;
                            
                             if (row.user_id != 1) {
                                tmp += `<li><a onclick="removeUser(${row['user_id']})"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>`;
                            }
                                            
                            tmp += `</ul>
                                    </li>
                                </ul>
                            `;

                            return tmp;
                        }
                    },
                ]
            });

            $(".bulk-delete").attr({
                "data-popup": "tooltip",
                "title": locales['button_delete']
            });
            $(".btn-export").attr({
                "data-popup": "tooltip",
                "title": locales['button_export']
            });
            $(".btn-colvis").attr({
                "data-popup": "tooltip",
                "title": locales['button_colvis']
            });

            {# $('[data-popup="tooltip"]').tooltip(); #}

            // On each draw, loop over the `detailRows` array and show any child rows
            dt.on('draw', function () {
                $(".switch").bootstrapSwitch();
                if (Array.prototype.forEach) {
                    var elems = Array.prototype.slice.call(document.querySelectorAll('.switchery'));
                    elems.forEach(function(html) {
                        var switchery = new Switchery(html);
                        //debugger;
                    });
                }
                else {
                    var elems = document.querySelectorAll('.switchery');
                    for (var i = 0; i < elems.length; i++) {
                        var switchery = new Switchery(elems[i]);
                    }
                }
                $(".switchery").on('change', function(e) {
                    var status = this.checked ? locales['switch_text_enabled'] : locales['switch_text_disabled'];
                    $(this).parent().children(".switchery-status").text(status);
                });
                // $(".switch").bootstrapSwitch();
                {# $('[data-popup="tooltip"]').tooltip(); #}
            });

            dt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'deselect', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'search.dt', function (e, objDT) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });
            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });

            // User Permissions
            citiesdt = $('#datatables_permissions').DataTable({
                processing: true,
                serverSide: true,
                language: {
                    ...locales['dt_language'],
                    search: ''
                },
                dom: '<"datatable-header"fB><"datatable-scroll"t><"datatable-footer"lip>',
                stateSave: true,
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                drawCallback: function () {
                            $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                        },
                        preDrawCallback: function() {
                            $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                        },
                "ajax": {
                    url: "{{ link('user/user_permission/dtUserPermissionHandler') }}",
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: `<i class='far fa-trash-alt'></i> {{lang('dtb_delete')}}`,
                        className: 'bulk-delete disabled',
                        action: function(e, citiesdt, node, config) {
                            var selectedRows = citiesdt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item.user_group_id);
                            });
                            // console.log(selectedIds);
                            if (selectedIds.length > 0){
                                if(selectedIds.includes('1'))
                                {
                                swal({ title: "{{ lang('protected_group') }}", type: "warning", closeOnConfirm: true  })
                                }else{
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link("user/user_permission/delete") }}',
                                        type: 'post',
                                        data: {ids: selectedIds},
                                        success: function(resp){
                                            reloadDT();
                                        }
                                    });
                                });
                                }
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: `<i class="fas fa-file-download"></i> {{lang('dtb_export_table')}}`,
                        className: `dt-list btn-export {{base.plan_trial_id == 3 ? "disabled plan-lock-btn" : ""}}`,
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                ],

                columns: [
                    {
                        title:'<input type="checkbox" class="styled" onchange="toggleSelectAllCities(this);">',
                        orderable: false,
                        data: "user_group_id",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "name",
                        render: function (data, type, row) {
                            if (row.user_group_id == 1) {
                                return `<a href="{{ link('user/user_permission') }}">${row['name']}</a>`;
                            }
                            return `<a href="{{ link('user/user_permission/update') }}?user_group_id=${row['user_group_id']}">${row['name']}</a>`;
                        }
                    },
                    {data:"description"},
                    {data:"created_at"},
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 4,
                        orderable: false,
                        render: function(data, type, row) {
                            if (row.user_group_id == 1) {
                                return '';
                            }
                            return `<ul class="icons-list pull-right">
                                    <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-menu9"></i>
                                        </a>
                                        <ul class="dropdown-menu dropdown-menu-right">
                                            <li><a href='{{ link('user/user_permission/update') }}?user_group_id=${row['user_group_id']}'><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>
                                            <li><a onclick="removeUserPermission(${row['user_group_id']})"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>
                                        </ul>
                                    </li>
                                </ul>
                            `;
                        }
                    }
                ]
            });

            // On each draw, loop over the `detailRows` array and show any child rows
            citiesdt.on('draw', function () {
                $(".switch").bootstrapSwitch();
            });

            citiesdt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'deselect', function ( e, objDT, type, indexes ) {
                if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'search.dt', function (e, objDT) {
                if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });

            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });
        });

        function removeUser(id) {
            confirmMessage(function() {
                ajax("{{ link('user/user/delete') }}", {ids: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function removeUserPermission(id) {
            confirmMessage(function() {
                ajax("{{ link('user/user_permission/delete') }}", {ids: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function reloadDT() {
            dt.ajax.reload();
            citiesdt.ajax.reload();
        }

        function toggleSelectAll(checkbox) {
            if (checkbox.checked == true) {
                dt.rows().select();
            } else {
                dt.rows().deselect();
            }
        }

        function toggleSelectAllCities(checkbox) {
            if (checkbox.checked == true) {
                citiesdt.rows().select();
            } else {
                citiesdt.rows().deselect();
            }
        }


        function statusSwitch(id, status, limitReached) {
            return `<div class="checkbox checkbox-switchery  no-margin">
                        <label>
                            <input type="checkbox" onchange="changeStatus(` + id + `, this.checked);" class="switchery  ${limitReached ? 'plan-lock-btn' : ''}" ` + status + `>
                            <span class="switchery-status">` + (status ? locales['switch_text_enabled'] : locales['switch_text_disabled']) + `</span>
                        </label>
                    </div>`;
        }

        function changeStatus(id, status) {
            var newStatus = (status ? 1 : 0);
            $.ajax({
                url: "{{ link('user/user/changeStatus') }}",
                data: {id: id, status: newStatus},
                dataType: 'JSON',
                method: 'POST',
                success: function (response) {
                    if (response.status == 'success') {
                        new PNotify({
                            title: response.title,
                            text: response.message,
                            addclass: 'bg-success stack-top-right',
                            stack: {"dir1": "down", "dir2": "right", "push": "top"}
                        });
                    } else {
                        for (error in response.errors) {
                            new PNotify({
                                title: response.title,
                                text: response.errors[error],
                                addclass: 'bg-danger stack-top-right',
                                stack: {"dir1": "down", "dir2": "right", "push": "top"}
                            });
                        }
                    }
                }
            });
        }

        $(document).on('click', '.limit-switch', function() {
            $('#upgrade_plan_modal').modal('show')
        })
    </script>
{% endblock scripts %}

{% block endScripts %}
    <script>
        // user group select2
        $("#user_group_id").select2({
            placeholder: "{{ lang('entry_user_group') }}",
            allowClear: true
        });

        // tabs
        $('#user_tabs a').on('click', function (e) {
            e.preventDefault()
            $(this).tab('show')
            
            $('.inner-settings-title .theme-btn').addClass('hide');
            $('.inner-settings-title').find('.' + $(this).attr('href').substring(1)).removeClass('hide');
        });

        // img uploader
        function getBase64(file, parent) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            }).then(function (result) {
                console.log(result)
                let item = "";
                item += `<img src="${result}">`
                item += `<input type="hidden" name="image" value="${result}">`
                parent.find('img').remove();
                parent.find('input[type="hidden"]').remove();
                parent.append(item);
            });
        }
        $('.add-user-modal .user-img input').on('change', function () {
            let file = this.files[0];
            getBase64(file, $(this).parent())
        });
        $('#add_user_btn').click(function() {
            resetForm();
            $('#setting-payment').attr('action', "user/user/insert");
            $('#add_user_modal .title').html("{{ lang('btn_new_user') }}")
            $('#add_user_modal .button.submit').html("{{ lang('btn_create') }}")
        })
    </script>

    <script>
        let resetForm = function() {
            document.getElementById("setting-payment").reset();
            $('#add_user_modal .user-img img').remove();
            $('#add_user_modal [name="status"]').remove();
            $('#user_group_id').val('');
            $('#user_group_id').trigger('change'); ;
        }
        $(document).ready(function() {
            $(document).on('click', '.update-user-link', function(e) {
                e.preventDefault();
                let userId = $(this).data('userid');
                let setUserForm = function(r) {
                    resetForm();
                    $('#setting-payment').attr('action', "{{ link('user/user/update?user_id=') }}" + userId)
                    $('#add_user_modal .title').html("{{ lang('text_update_user') }}")
                    $('#add_user_modal .button.submit').html("{{ lang('btn_update') }}")
                    $('#add_user_modal [name="image"]').val(r.thumb)
                    $('#add_user_modal [name="username"]').val(r.username)
                    $('#add_user_modal [name="firstname"]').val(r.firstname)
                    $('#add_user_modal [name="lastname"]').val(r.lastname)
                    $('#add_user_modal [name="email"]').val(r.email)
                    //email-help-block
                    if (userId==1){
                        $('#add_user_modal #email-help-block').html("{{ lang('admin_email_hint') }}")
                    }
                    $('#add_user_modal .user-img').append(`<img src="${r.thumb}">`)
                    $('#add_user_modal .form').append(`<input type="hidden" name="status" value="${r.status}">`)
                    $('#user_group_id').val(r.user_group_id);
                    $('#user_group_id').trigger('change');
                    $('#add_user_modal [name="outlet_id"]').val(r.outlet_id || 0);
                    $('#add_user_modal [name="outlet_id"]').trigger('change');
                    $('#add_user_modal').modal('show');
                }
                
                $.ajax({
                    url: "{{ link('user/user/update?ajax=1&user_id=') }}" + userId,
                    type: 'get',
                    dataType: 'json',
                    success: function(r){
                        setUserForm(r.data);
                    }
                });
            });
        })
    </script>
{% endblock %}
