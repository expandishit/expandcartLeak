    <div class="list-wrapper customer-list">
        <div class="content-inner">
            <div class="inner-settings-title mb-10">
                <h4 class="fb-app-title">
                    <a href="{{ link('sale/component/customers') }}"><i class="icon-arrow-left52 position-left text-default"></i></a>
                    {{lang("mn_sub_customer_groups")}}
                </h4>
                <div class="btns">
                    <a href="{{ link('sale/customer_group/insert') }}" class="theme-btn rounded-primary-btn {{ base.currentplan == '3' ? 'plan-lock-btn' : '' }}">{{ lang('btn_add_group') }}</a>
                </div>
            </div>
            <div class="page-tabs-container">
                {# end navigation-tabs #}
				<div class="tabs-content-wrapper">
					<div class="page-loader">
						<div class="blocks">
							<div class="block orange"></div>
							<div class="block blue"></div>
						</div>
					</div>
                    <!-- Detached content -->
                    <div>
                        <div class="row">
                            <div class="col-md-12">
                                <!-- Advanced legend -->
                                <div class="features-table-container">
                                    <div class="collapse in" id="panel-language">
                                        <table id="datatable-language" class="table table-hover datatable-highlight">
                                            <thead>
                                            <tr>
                                                <th></th>
                                                <th>{{ lang('column_name') }}</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                                <!-- /a legend -->
                            </div>
                        </div>
                    </div>
                    <!-- /detached content -->
				</div>
            </div>
        </div>
    </div>

{% block scripts %}
    {% import _self as dtControls %}
    <script>
        $(document).ready(function() {
            $.extend($.fn.dataTable.defaults, {
                autoWidth: false,
                dom: '<"datatable-header"fB><"datatable-scroll"t><"datatable-footer"lip>',
                language: locales['dt_language'],
                lengthMenu: [[10, 25, 50, 100, 200], [10, 25, 50, 100, 200]]
            });
        });

        var dt;
        $(document).ready(function() {

            dt = $('#datatable-language').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                language: {
                    ...locales['dt_language'],
                    search: ''
                },
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                "ajax": {
                    url: '{{ link('sale/customer_group/dtHandler') }}',
                    type: "post",
                    complete: function(res) {
                        res.responseJSON.recordsTotal == 0 ? location.reload() : '';
                    },
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                drawCallback: function () {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                },
                preDrawCallback: function() {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                },
                buttons: [
                    {
                        extend: 'colvis',
                        text: `<i class="fas fa-columns"></i> {{lang('dtb_custom_col')}}`,
                        className: 'btn-colvis',
                        columns: [1,2]
                    },// cols
                    {
                        extend: 'collection',
                        text: '<i class="fas fa-file-download"></i> {{lang("dtb_export_table")}}',
                        className: 'btn-export',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },// export
                    {
                        text: "<i class='far fa-trash-alt'></i> {{lang('dtb_delete')}}",
                        className: 'bulk-delete disabled',
                        action: function(e, dt, node, config) {
                            var selectedRows = dt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item.customer_group_id);
                            });
                            if (selectedIds.length > 0){
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link('sale/customer_group/dtDelete') }}',
                                        type: 'post',
                                        data: {id: selectedIds},
                                        success: function(){
                                            reloadDT();
                                        }
                                    });
                                });
                            }
                        }
                    },// delete
                ],

                columns: [
                    {
                        title:`<input type="checkbox" class="styled" onchange='toggleSelectAll(this);'>`,
                        orderable: false,
                        data: "customer_group_id",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: 'name',
                        render: function ( data, type, row ) {
                            return `<a href="{{ link('sale/customer_group/update') }}?customer_group_id=${row['customer_group_id']}">${row['name']}</a>`;
                        }
                    }
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 2,
                        orderable: false,
                        render: function (data, type, row) {
                            return `<ul class="icons-list pull-right">
                                    <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-menu9"></i>
                                        </a>
                                        <ul class="dropdown-menu dropdown-menu-right">
                                            <li><a href='{{ link('sale/customer_group/update') }}?customer_group_id=${row['customer_group_id']}'><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>
                                            <li><a onclick="removeItem(${row['customer_group_id']})"><i class='far fa-trash-alt'></i> ${locales['button_delete']}</a></li>
                                        </ul>
                                    </li>
                                </ul>
                            `;
                        }
                    }
                ]
            });

            $('[data-popup="tooltip"]').tooltip();
            $('[data-toggle="tooltip"]').tooltip();

            // On each draw, loop over the `detailRows` array and show any child rows
            dt.on('draw', function () {
                $(".switch").bootstrapSwitch();
            });

            dt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'deselect', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'search.dt', function (e, objDT) {
//                console.log(e);
//                dt.columns(':visible').search(e);
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });
            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });

//            $(".bulk-delete").on('click', function() {
//                console.log(dt.rows('.selected').data());
//            });
        });

        function removeItem(id) {
            //alert(clientId);
            confirmMessage(function() {
                ajax("{{ link("sale/customer_group/dtDelete") }}", {id: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function reloadDT() {
            dt.ajax.reload();
        }

        function toggleSelectAll(checkbox) {
            if (checkbox.checked == true) {
                dt.rows().select();
            } else {
                dt.rows().deselect();
            }
        }
    </script>
{% endblock scripts %}
