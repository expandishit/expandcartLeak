{% extends "base.expand" %}
{% import "controls/forms.expand" as forms %}

{% set bodyClasses = "has-detached-right sidebar-detached-hidden" %}
{% set hideHeader = true %}
{% set icon = random(['fa-check-circle', 'fa-hand-peace', 'fa-thumbs-up']) %}

{% block content %}

{% include "module/abandoned_cart/mass_mail.expand" %}
<div class="list-wrapper order-list">
    <div class="">

        <div class="inner-settings-title mb-10 orders-title">
            <h4 class="fb-app-title">
                <a href="{{ link('sale/order') }}"><i class="icon-arrow-left52 position-left text-default"></i></a>
                {{lang("abandoned_cart_heading_title")}}
            </h4>
            <div class="btns">
            </div>
        </div>
        <div class="panel">
            <div class="panel-body pt-0 pb-0">
                <div class="card-body">
                    <div id="product-grid">
                        <div class="container-detached">
                            <div class="content-detached">
                                <div class="tab-pane fade in active" id="gridView">
                                    <div class="features-table-container">
                                        <div class="collapse in">
                                            <table id="datatable-language" class="table table-hover datatable-highlight">
                                                <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>{{ lang('column_order_id') }}</th>
                                                    <th>{{ lang('column_customer') }}</th>
                                                    <th>{{ lang('entry_email') }}</th>
                                                    <th>{{ lang('column_total') }}</th>
                                                    <th>{{ lang('text_emailed') }}</th>
                                                    <th>{{ lang('text_phone') }}</th>
                                                    <th>{{ lang('column_date_added') }}</th>
                                                    <th>{{ lang('column_date_modified') }}</th>
                                                    <th class="do-not-export-excel do-not-export-pdf do-not-export-csv"></th>
                                                </tr>
                                                </thead>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="table-guide">
        <i class="fas fa-info-circle"></i>
        {{lang('text_learn_more_about')}}&nbsp;
        {%  set url = "https://support.expandcart.com/abandoned-cart-recovery-app" %}
        <a href="{{ url }}">{{lang('abandoned_cart_heading_title')}} <i class="fas fa-external-link-alt"></i></a>
    </div>
</div>


{% include "module/abandoned_cart/filter.expand" %}

{% endblock %}

{% block scripts %}

    {% import _self as dtControls %}
    <script>
        var links = {};

        links['dtHandler'] = '{{ link('sale/abandoned_cart/datatable') }}';
        links['dtUpdateStatus'] = '{{ link("localisation/language/dtUpdateStatus") }}';
        links['dtDelete'] = '{{ link('sale/abandoned_cart/deleteAbandonedOrder') }}';
        links['send'] = '{{ link('localisation/language/send') }}';

        $(document).ready(function () {

            $.extend($.fn.dataTable.defaults, {
                autoWidth: false,
                dom: '<"datatable-header"Bf><"datatable-scroll-wrap"t><"datatable-footer"lip>',
                language: locales['dt_language'],
                lengthMenu: [[10, 25, 50, 100, 200], [10, 25, 50, 100, 200]]
            });

            $('#resetList').click(function () {

                $(':input', '#filter')
                    .not(':button, :submit, :reset, :hidden')
                    .val('')
                    .prop('checked', false)
                    .prop('selected', false);

                $('#filter').find('select').each(function () {
                    this.value = '';
                }).trigger('change');

                $('#filter').find('.noui-slider-primary').each(function () {
                    $(this).data('ionRangeSlider').reset();
                });

                orderTable.on('preXhr.dt', function (e, settings, data) {
                    return $.extend(data, {filter: null});
                });

                orderTable.ajax.reload();
                /*$.ajax({
                    url: listLink,
                    method: 'get',
                    success: function (response) {
                        $('#product-grid').html(response);
                    }
                });*/
            });
        });

        function toggleFilter(el) {
            //debugger;
            var isFilterHidden = $('body').hasClass('sidebar-detached-hidden');

            if (isFilterHidden) $(el).children('a').children('span').text('{{ lang('lbl_hide_filter') }}');
            else $(el).children('a').children('span').text('{{ lang('lbl_filter') }}');
        }

        var orderTable;

        Array.prototype.remove = function (item) {
            // index will have -1 if item does not exist
            // else it will have the index of 1st item found in array
            var index = this.indexOf(item);

            if (index > -1) {
                // splice() method is used to add/remove items(s) in array
                this.splice(index, 1);
            }

            return index;
        }

        var selectedIds = [];
        $(document).ready(function () {
            showHideOrderStatuses();

            $('.hide-on-grid-view').hide();

            $('select').select2({dropdownAutoWidth: true});

            orderTable = $('#datatable-language').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                rowId: "order_id",
                ajax: {
                    url: '{{ link('sale/abandoned_cart/datatable') }}',
                    type: "post",
                    beforeSend: function() {
                        $('#datatable-language').before('<div class="text-center loading" style="position: absolute;width: 100%;height: 100%;"><img src="view/image/blue-loading-gif-transparent-9.gif"  style="width: 100px" /></div>');
                    },
                    complete: function() {
                        $('.loading').remove();
                    },
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                dom: '<"datatable-header"fB><"datatable-scroll-wrap"t><"datatable-footer"lip>',
                language: {
                    ...locales['dt_language'],
                    search: ''
                },
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                buttons: [
                    {
                        text: "<i class='icon-trash'></i>",
                        className: 'btn btn-default bulk-delete',
                        action: function (e, dt, node, config) {
                            var selectedRows = dt.rows('.selected').data();
                            selectedRows.each(function (item) {
                                selectedIds.push(item.order_id);
                            });
                            if (selectedIds.length > 0) {
                                confirmMessage(function () {
                                    $.ajax({
                                        url: links['dtDelete'],
                                        type: 'post',
                                        data: {selected: selectedIds},
                                        success: function () {
                                            reloadDT();
                                        }
                                    });
                                });
                            }
                        }
                    },
                    {
                        text: "<i class='icon-merge'>",
                        className: "btn btn-default merge-orders disabled",
                        action(e, dt, node, config) {
                            swal({
                                    title: "{{ lang('merge_orders_title') }}",
                                    text: "{{ lang('merge_orders_text') }}",
                                    type: "info",
                                    showCancelButton: true,
                                    confirmButtonColor: "#EF5350",
                                    confirmButtonText: "{{ lang('merge_orders_yes_button') }}",
                                    cancelButtonText: "{{ lang('merge_orders_no_button') }}",
                                },
                                function (isConfirm) {
                                    if (isConfirm) {
                                        update_selected_rows();
                                        mergeOrders(selectedIds);
                                    }
                                }
                            );
                        }
                    },
                    {
                        extend: 'collection',
                        text: '<i class="icon-drawer-out"></i>',
                        className: 'btn btn-default btn-export',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible:not(.do-not-export-csv)'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible:not(.do-not-export-excel)'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible:not(.do-not-export-pdf)'
                                }
                            }
                        ]
                    },
                    {
                        extend: 'colvis',
                        text: '<i class="icon-grid3"></i>',
                        className: 'btn btn-default btn-colvis',
                        columns: [1, 2, 3, 4, 5, 6, 7]
                    },
                    {
                        className: `btn btn-default hide send-mass-mail`,
                        text: `<i class="icon-printer4"></i>`,
                        action: function (e, dt, node, config) {
                            var selectedIds = [];
                            var selectedRows = dt.rows('.selected').data();


                            $('#mass_mail').on('show.bs.modal', function () {
                                $(this).find('#mail_abandoned_orders').find('option').remove();

                                var $selectedOrders = $(this).find('#mail_abandoned_orders');

                                selectedRows.each(function (item) {
                                    $selectedOrders.append(
                                        new Option(item.order_id, item.order_id, true, true)
                                    );
                                });

                                $selectedOrders.select2();
                            });

                            $('#mass_mail').on('hide.bs.modal', function () {
                                $('#mass_mail').find('.form-group').removeClass('has-error');
                                $('#mass_mail').find('.help-block').text('');

                                $('#mass_mail #error-area').html('');
                            });

                            $('#mass_mail').modal('show');
                        }
                    }
                ],
                columns: [
                    {
                        title:`<input type="checkbox" class="styled" onchange='toggleSelectAll(this);'>`,
                        orderable: false,
                        width: "50px",
                        //className: 'select-checkbox',
                        data: 'order_id',
                        render: function(data, type, row) {
                           return `<input type="checkbox" row-id="${row['order_id']}" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "order_id",
                        render: function (data, type, row) {
                            return `<a href="{{ link('sale/order/info?order_id=') }}${row['order_id']}"> {{ lang('text_order_number') }} ${row['order_id']}</a>`;
                        }
                    },
                    {
                        data: 'customer',
                        render: function (data, type, row) {
                            if (parseInt(row['customer_id']) > 0) {
                                return `<a target="_blank" href="{{ link('sale/customer/update?customer_id=') }}${row['customer_id']}" class="text-semibold">${row['customer']}</a>`;
                            } else {
                                return `<span>{{ lang('customer_not_in_db') }}</span>`;
                            }
                        }
                    },

                    {
                        data: 'email',
                        render: function (data, type, row) {
                            return data != 0 ? data : '-';
                        }
                    },
                    {
                        data: "total",
                        render: function (data, type, row) {
                            return `<label class="label label-primary">${row['total']}</label>`;
                        }
                    },
                    {
                        data: "emailed.emailed",
                        render: function (data, type, row) {
                            return (
                                typeof data != 'undefined' ?
                                    `<label class="label label-success">{{ lang('text_yes') }}</label>` :
                                    '<label class="label label-warning">{{ lang('text_no') }}</label>');
                        }
                    },
                    {
                        data: 'telephone',
                        render: function (data, type, row) {
                            return data != 0 ? data : '-';
                        }
                    },
                    {data: 'date_added'},
                    {data: 'date_modified'},
                ],
                order: [[1, "desc"]],
                columnDefs: [
                    {
                        targets: 9,
                        orderable: false,
                        width: "10px",
                        className: "text-center",
                        render: function (data, type, row) {
                            return `<ul class="icons-list pull-right">
                                    <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-menu9"></i>
                                        </a>
                                        <ul class="dropdown-menu dropdown-menu-right">
                                            <li><a onclick="removeItem(${row['order_id']})"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>
                                        </ul>
                                    </li>
                                </ul>
                            `;
                        }
                    }
                ]
            });

            $(".bulk-delete").attr({
                "data-popup": "tooltip",
                "title": locales['button_delete']
            });
            $(".btn-export").attr({
                "data-popup": "tooltip",
                "title": locales['button_export']
            });
            $(".btn-colvis").attr({
                "data-popup": "tooltip",
                "title": locales['button_colvis']
            });
            $(".merge-orders").attr({
                "data-popup": "tooltip",
                "title": locales['button_merge']
            });
            $(".btn-print").attr({
                "data-popup": "tooltip",
                "title": locales['button_print']
            });

            $('.dt-buttons').append(`<a onclick="$('.send-mass-mail').trigger('click');" class="btn btn-default disabled email-orders"><b><i class="icon-envelop3"></i></b></a>`)

            $('.dataTables_filter').append(`<a onclick="toggleFilter(this)" class="sidebar-detached-hide btn btn-default"><i class='icon-filter3'></i> </a>`)

            // $('[data-popup="tooltip"]').tooltip();

            // On each draw, loop over the `detailRows` array and show any child rows
            orderTable.on('draw', function () {
                $(".switch").bootstrapSwitch();
                $(".styled, .multiselect-container input").uniform({
                    radioClass: 'choice'
                });
            });

            orderTable.on('select', function (e, objDT, type, indexes) {
                if (orderTable.rows('.selected').any()) {
                    $(".bulk-delete").removeClass('disabled');
                    $('.btn-print').removeClass('disabled');

                    $('.email-orders').removeClass('disabled');
                }
                else {
                    $(".bulk-delete").addClass('disabled');
                    $(".btn-print").addClass('disabled');

                    $('.email-orders').addClass('disabled');
                }

                if ($('.selected').length >= 2) $('.merge-orders').removeClass('disabled')
                else $('.merge-orders').addClass('disabled')

            })
                .on('deselect', function (e, objDT, type, indexes) {
                    if (orderTable.rows('.selected').any()) {
                        $(".bulk-delete").removeClass('disabled');
                        $('.btn-print').removeClass('disabled');

                        $('.email-orders').removeClass('disabled');
                    }
                    else {
                        $(".bulk-delete").addClass('disabled');
                        $(".btn-print").addClass('disabled');

                        $('.email-orders').addClass('disabled');
                    }

                    if ($('.selected').length >= 2) $('.merge-orders').removeClass('disabled')
                    else $('.merge-orders').addClass('disabled')
                })
                .on('search.dt', function (e, objDT) {
                    if (orderTable.rows('.selected').any()) {
                        $(".bulk-delete").removeClass('disabled');
                        $('.btn-print').removeClass('disabled');

                        $('.email-orders').removeClass('disabled');
                    }
                    else {
                        $(".bulk-delete").addClass('disabled');
                        $(".btn-print").addClass('disabled');

                        $('.email-orders').addClass('disabled');
                    }
                });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });
            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });
        });

        function removeItem(id) {
            confirmMessage(
                function () {
                    $.ajax({
                        url: links['dtDelete'],
                        type: "post",
                        data: {selected: [id]},
                        success: function (resp) {
                            reloadDT();
                        }
                    });
                }
            );
        }

        function reloadDT() {
            orderTable.ajax.reload();
            // loadKanbanCards();
        }

        function toggleSelectAll(checkbox) {
            if (checkbox.checked == true) {
                orderTable.rows().select();
            } else {
                orderTable.rows().deselect();
            }
        }

        $(document).on('click', '#filter-button', function (e) {
            e.preventDefault();
            $('#filter-modal').modal('show');
        }).on('click', '#grid-view-button', function () {
            $('.hide-on-grid-view').hide();
            $('.show-on-grid-view').show();
        }).on('click', '#kanban-view-button', function () {
            $('.hide-on-kanban-view').hide();
            $('.show-on-kanban-view').show();
        }).on('change', '#filter-order-statuses', function () {
            showHideOrderStatuses();
        });

        function update_selected_rows() {
            var selectedRows = orderTable.rows('.selected').data();
            selectedRows.each(function (item) {
                selectedIds.push(item.order_id);
            });
        }


        function showHideOrderStatuses() {
            $('.order-status-col').hide();

            $('#filter-order-statuses option:selected').each(function () {
                var order_status_id = $(this).attr('value');
                $('.order-status-col-' + order_status_id).show();
            });

        }

        function draggableInit() {
            var order_id;
            var original_order_status_id;
            var new_order_status_id;

            $(document).on('dragstart', '[draggable=true]', function (event) {
                order_id = $(this).attr('data-order-id');
                original_order_status_id = $(this).attr('data-os-id');
                event.originalEvent.dataTransfer.setData("text/plain", event.target.getAttribute('id'));
            });

            $('#sortableKanbanBoards .kanban-drop-zone').bind('dragover', function (event) {
                event.preventDefault();
            });

            $('#sortableKanbanBoards .col-md-3 .kanban-drop-zone').bind('drop', function (event) {
                var self = $(this);
                new_order_status_id = self.attr('data-os-id');

                if (original_order_status_id != new_order_status_id) {
                    var elementId = event.originalEvent.dataTransfer.getData("text/plain");
                    var elem = $('#' + elementId);

                    var modal = $('#processing-modal');
                    var form = $('#change-order-status-form');
                    var order_id = elem.attr('data-order-id');
                    var new_order_status_name = $('.order-status-col-' + new_order_status_id + ' span.order-status-name').text();
                    var old_order_status_name = $('.order-status-col-' + original_order_status_id + ' span.order-status-name').text();

                    form.attr('action', '{{ link("sale/order/history?order_id=") }}' + order_id);

                    modal.find('label#new-order-status').text(new_order_status_name);
                    modal.find('label#old-order-status').text(old_order_status_name);

                    $('#processing-modal').modal('show');

                    $(document).on('click', '#submit-change-order-status-form', function (event) {
                        event.preventDefault();
                        startLoadingScreen();
                        var notify;
                        if (modal.find('[name=notify]').is(':checked')) {
                            notify = 1;
                        } else {
                            notify = 0;
                        }

                        var comment = modal.find('[name=comment]').text();

                        $.ajax({
                            url: form.attr('action'),
                            type: "post",
                            data: {notify: notify, comment: comment, order_status_id: parseInt(new_order_status_id)},
                            success: function (resp) {
                                reloadDT();
                                removeLoadingScreen();
                                $('#processing-modal').modal('hide');
                            }
                        });

                    });
                }
            });
        }

        $(document).ready(function () {
            reloadDT();
            draggableInit();
        }).on('click', '.collapsy', function () {
            var panel_body = $(this).closest('.panel').find('.kanban-card-content');
            var panel_footer = $(this).closest('.panel').find('.panel-footer');

            if (panel_body.hasClass('opened')) {
                panel_body.slideUp('fast').removeClass('opened');
                panel_footer.slideUp('fast').removeClass('opened');
                $(this).html('<i class="fa fa-caret-down"></i>');
                return;
            }
            else {
                panel_body.slideDown('fast').addClass('opened');
                panel_footer.slideDown('fast').addClass('opened');
                $(this).html('<i class="fa fa-caret-up"></i>');
                return;
            }
        });

    </script>

{% endblock scripts %}
