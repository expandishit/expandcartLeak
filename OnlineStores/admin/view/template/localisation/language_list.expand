{% extends "base.expand" %}
{% from "controls/breadcrumb.expand" import breadcrumb as breadcrumb %}
{% import "controls/forms.expand" as forms %}
{% set dualMenuEnabled = true %}

{% block title %}
    {{ lang('heading_title', 'setting/setting') }}
{% endblock title %}

{% block breadcrumb %}
    {{ breadcrumb(breadcrumbs) }}
{% endblock breadcrumb %}

{% block secondarymenu %}
    {% include 'setting/settingmenu.expand' with {'expand': '#lang&region', 'active': '#language'} %}
{% endblock secondarymenu %}

{% block headelements %}
{% endblock headelements %}


{% block content %}
    <div class="row">
        <div class="col-md-12">
            <!-- Advanced legend -->
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h5 class="panel-title">
                        <i class="fas fa-cubes fa-lg position-left"></i>
                        {{ lang('panel_language') }}
                    </h5>
                    <div class="heading-elements">
                        <ul class="icons-list">
                            <li><a data-action="collapse"></a></li>
                        </ul>
                    </div>
                </div>
                <div class="collapse in" id="panel-language">
                    <table id="datatable-language" class="table table-hover datatable-highlight">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Language Name</th>
                            <th>Code</th>
                            <th>Status</th>
                            <th>Locale</th>
                            <th>Directory</th>
                            <th>File Name</th>
                            <th></th>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <!-- /a legend -->
        </div>
    </div>
{% endblock content %}

{% block scripts %}
    {{ parent() }}
    {% import _self as dtControls %}
    <script>
        $(document).ready(function() {
            $.extend($.fn.dataTable.defaults, {
                autoWidth: false,
                dom: '<"datatable-header"fBl><"datatable-scroll-wrap"t><"datatable-footer"ip>',
                language: locales['dt_language'],
                lengthMenu: [[10, 25, 50, 100, 200], [10, 25, 50, 100, 200]]
//                drawCallback: function () {
//                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
//                },
//                preDrawCallback: function () {
//                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
//                }
            });
        });

        var dt;
        $(document).ready(function() {

            dt = $('#datatable-language').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                language: locales['dt_language'],
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                "ajax": {
                    url: '{{ link('localisation/language/dtHandler') }}',
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: "<i class='fa fa-trash position-left'></i> " + locales['button_delete'],
                        className: 'btn btn-danger bulk-delete disabled',
                        action: function(e, dt, node, config) {
                            var selectedRows = dt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item.language_id);
                            });
                            //console.log(selectedIds);
                            if (selectedIds.length > 0){
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link('localisation/language/dtBulkDelete') }}',
                                        type: 'post',
                                        data: {ids: selectedIds},
                                        success: function(){
                                            reload();
                                        }
                                    });
                                });
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: '<i class="icon-drawer-out"></i> <span class="caret"></span>',
                        className: 'btn bg-blue btn-icon',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                    {
                        extend: 'colvis',
                        text: '<i class="icon-grid3"></i> <span class="caret"></span>',
                        className: 'btn bg-indigo-400 btn-icon',
                        columns: [1, 2, 3, 4, 5, 6]
                    }
                ],

                columns: [
                    {
                        title:`<input type="checkbox" class="styled" onchange='toggleSelectAll(this);'>`,
                        orderable: false,
                        data: "language_id",
                        width: "50px"
                    },
                    {data: "name"},
                    {data: "code"},
                    {
                        data: "status",
                        width: "30px"
                    },
                    {data: "locale"},
                    {data: "directory"},
                    {data: "filename"},
                    {
                        //orderable: false,
                        data: "language_id",
                        width: "120px"
                        //defaultContent: "<button class='btn btn-danger'><i class='fa fa-trash'></i> Remove</button>"
                    },
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: [4, 5, 6],
                        visible: false
                    },
                    {
                        orderable: false,
                        className: 'select-checkbox',
                        targets: 0
                        {#orderable: false,#}
                        {#"render": function (data, type, row) {#}
                            {#return `{{ dtControls.itemSelector("${data}") }}`;#}
                        {#},#}
                        {#"targets": 0#}
                    },
                    {
                    targets: 3,
                    orderable: false,
                    render: function (data, type, row) {
                        var status= (data == "1" ? 'checked="checked"' : '');
                        return `{{ dtControls.statusSwitch("${row.language_id}", "${status}") }}`;
                    }
                },
                    {
                        targets: 7,
                        orderable: false,
                        render: function (data, type, row) {
                            //console.log(row);
                            return `{{ dtControls.btnEditItem("${data}") }} {{ dtControls.btnDeleteItem("${data}") }}`;
                        }
                    }]
            });

            // On each draw, loop over the `detailRows` array and show any child rows
            dt.on('draw', function () {
                $(".switch").bootstrapSwitch();
            });

            dt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'deselect', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
            .on( 'search.dt', function (e, objDT) {
//                console.log(e);
//                dt.columns(':visible').search(e);
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });
            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });

//            $(".bulk-delete").on('click', function() {
//                console.log(dt.rows('.selected').data());
//            });
        });

        function changeStatus(id, status) {
            //alert(clientId + ": " + (status ? 1 : 0));
            var newStatus = (status ? 1 : 0);
            ajax("{{ link("localisation/language/dtChangeStatus") }}", {id: id, status: newStatus});
        }

        function removeItem(id) {
            //alert(clientId);
            confirmMessage(function() {
                ajax("{{ link("localisation/language/dtDeleteLanguage") }}", {id: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function reloadDT() {
            dt.ajax.reload();
        }

        function toggleSelectAll(checkbox) {
            if (checkbox.checked == true) {
                dt.rows().select();
            } else {
                dt.rows().deselect();
            }
        }
    </script>
{% endblock scripts %}

{% macro btnEditItem(id) %}
    {#<button class='btn btn-primary btn-xs' onclick="location.href='{{ link('localisation/language/edit') }}?language_id={{ id }}';"><i class='icon-pencil7'></i></button>#}
    <a class='btn btn-primary btn-xs' href='{{ link('localisation/language/update') }}?language_id={{ id }}'><i class='icon-pencil7'></i></a>
{% endmacro btnEditItem %}

{% macro btnDeleteItem(id) %}
    <button class='btn btn-danger btn-xs' onclick="removeItem({{ id }})"><i class='icon-trash'></i></button>
{% endmacro btnDeleteItem %}

{% macro itemSelector(id) %}
    <input  type='checkbox' class='select-checkbox' name='country_id[]' value='{{ id }}' />
{% endmacro itemSelector %}

{% macro statusSwitch(id, status) %}
    <div class="checkbox checkbox-switch">
        <label>
            <input type="checkbox" class="switch" data-on-color="success" onchange="changeStatus({{ id }}, this.checked);" data-on-text="{{ lang('switch_text_enabled') }}" data-off-text="{{ lang('switch_text_disabled') }}" {{ status }} >
        </label>
    </div>
{% endmacro statusSwitch %}


