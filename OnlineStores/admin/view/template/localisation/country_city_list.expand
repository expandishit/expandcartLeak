{% extends "base.expand" %}
{% from "controls/breadcrumb.expand" import breadcrumb as breadcrumb %}
{% import "controls/forms.expand" as forms %}

{% block title %}
    {{ lang('heading_title', 'localisation/country') }}
{% endblock title %}

{% block breadcrumb %}
    {{ breadcrumb(breadcrumbs) }}
{% endblock breadcrumb %}

{% block content %}
    <style>
        .page-header-default {
            background-color: transparent;
        }
        .page-header-content + .breadcrumb-line {
            border: 0;
        }
    </style>
    <style>
        textarea
        {
            resize:vertical;
        }
    </style>
    <div class="container">
        <!-- Countries  -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">
                            <i class="fas fa-globe fa-lg position-left"></i>
                            {{ lang('text_countries') }}
                        </h5>
                    </div>
                    <div class="" id="panel-language">
                        <table id="datatable-countries" class="table table-hover datatable-highlight">
                            <thead>
                            <tr>
                                <th></th>
                                <th>{{ lang('entry_name') }}</th>
                                <th>{{ lang('column_iso_code_2') }}</th>
                                <th>{{ lang('column_iso_code_3') }}</th>
                                <th>{{ lang('entry_status') }}</th>
                                <th></th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!-- /Countries -->
        {#  ########################################################################## #}

        <!-- Regions / States -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">
                            <i class="fas fa-building fa-lg position-left"></i>
                            {{ lang('heading_title', 'localisation/zone') }}
                        </h5>
                    </div>
                    <div class="panel-body" id="panel-language">
                        <table id="datatables_zone" class="table table-hover datatable-highlight">
                            <thead>
                            <tr>
                                <th></th>
                                <th>{{ lang('column_name') }}</th>
                                <th>{{ lang('column_country') }}</th>
                                <th>{{ lang('column_code') }}</th>
                                <th>{{ lang('entry_status') }}</th>
                                <th></th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!-- /Regions / States -->
        <!-- Cities -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">
                            <i class="fas fa-building fa-lg position-left"></i>
                            {{ lang('heading_title', 'localisation/area') }}
                        </h5>
                    </div>
                    <div class="panel-body" id="panel-language">
                        <table id="datatables_areas" class="table table-hover datatable-highlight">
                            <thead>
                            <tr>
                                <th></th>
                                <th>{{ lang('column_name') }}</th>
                                <th>{{ lang('column_city') }}</th>
                                <th>{{ lang('column_code') }}</th>
                                <th>{{ lang('entry_status') }}</th>
                                <th></th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!-- /Areas -->
        {#  ########################################################################## #}


        <!-- RESET OPTION -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">
                            <i class="fas fa-building fa-lg position-left"></i>
                            {{ lang('reset_heading', 'localisation/country') }}
                        </h5>
                    </div>
                    <div class="" id="panel-language ">
                        <div style="border: 1px solid red;text-align: center">
                            <input class="btn btn-lg btn-danger" data-toggle="modal" data-target="#reset-modal"
                                style="margin:30px"
                                type="button" value="{{ lang('reset_heading', 'localisation/country') }}">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /RESET OPTION -->
    </div>
    <!-- Modal -->
    <div class="modal fade" id="reset-modal" tabindex="-1" role="dialog" aria-labelledby="reset-modal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="reset-modalLabel">{{ lang('reset_modal_title', 'localisation/country') }}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h5>{{ lang('reset_modal_body', 'localisation/country') }}</h5>
                    <input id="resetInput" class="form-control" onkeyup="checkResetInput()">
                </div>
                <div class="modal-footer" >
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ lang('reset_modal_close_button', 'localisation/country') }}</button>
                    <button type="button" class="btn btn-danger" disabled="true" id="resetButton"
                            onclick="resetCountriesAndCities()">{{ lang('reset_modal_do_button', 'localisation/country') }}</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /Modal -->


    <!-- Modal -->
    <div class="modal fade" id="enable-disable" tabindex="-1" role="dialog" aria-labelledby="enable-disable" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reset-modalLabel">{{ lang('bulk_modal_title', 'localisation/country') }}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>{{ lang('bulk_modal_country', 'localisation/country') }}</label>
                        <select class="form-control select2-multiple select2-hidden-accessible" multiple="multiple" name="countries[]" id="mass-country-select">
                            {% for country in all_countries_localed %}
                                <option value="{{ country.country_id }}">{{ country.name }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="form-group" style="text-align: center;">
                        <div class="checkbox checkbox-switchery">
                            <label>
                                <input type="checkbox" class="switchery" id="mass-country-switch">
                                <span class="switchery-status">{{ lang('bulk_switch_no') }}</span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" >
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ lang('bulk_modal_close_button', 'localisation/country') }}</button>
                    <button type="button" class="btn btn-success" id="bulk_update" onclick="bulkUpdate()"
                    >{{ lang('bulk_modal_do_button', 'localisation/country') }}</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /Modal -->

{% endblock content %}

{% block scripts %}
    {{ parent() }}
    {% import _self as dtControls %}

    <script>
        $(function () {
            $('select').select2({
                width: '100%',
                minimumResultsForSearch: Infinity,
            });
        });

        function bulkUpdate() {
            let countries = $('#mass-country-select').val();
            let status = $('#mass-country-switch').is(':checked') ? 1 : 0 ;
            if (countries != null && countries != [] && countries != "") {
                $.ajax({
                    url: '{{ link('localisation/country_city/bulkUpdate') }}',
                    type: "get",
                    dataType : "json",
                    data: {countries, status},
                    success: function (data) {
                        if (data.data == 'success') {
                            reloadDT();
                            $('#enable-disable').modal('hide');
                        } else {
                            alert('Error');
                        }
                    }
                })
            }
        }

        $(document).on('change', "mass-country-switch", function(e) {
            e.preventDefault();

            var self = $(this);
            var switch_status = self.siblings('.switchery-status');

            if (self.is(':checked')) {
                switch_status.html("{{ lang('bulk_switch_yes') }}");
            }
            else {
                switch_status.html("{{ lang('bulk_switch_no') }}");
            }
        });
    </script>
    <script>onkeypress
        $(document).ready(function() {
            $.extend($.fn.dataTable.defaults, {
                autoWidth: false,
                dom: '<"datatable-header"fB><"datatable-scroll-wrap"t><"datatable-footer"lip>',
                language: locales['dt_language'],
                lengthMenu: [[10, 25, 50, 100, 200], [10, 25, 50, 100, 200]]
            });
        });

        var dt;
        $(document).ready(function()
        {

            // Countries
            dt = $('#datatable-countries').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                pageLength: 25,
                pagingType: 'full',
                language: locales['dt_language'],
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                drawCallback: function () {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                },
                preDrawCallback: function() {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                },
                "ajax": {
                    url: '{{ link('localisation/country_city/handler') }}',
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: "<i class='icon-plus3'></i>",
                        className: 'btn btn-default btn-insert',
                        action: function(event) {
                            window.location.href = "{{ link('localisation/country_city/insert') }}";
                        }
                    },
                    {
                        text: "<i class='icon-trash'></i>",
                        className: 'btn btn-default bulk-delete disabled',
                        action: function(e, dt, node, config) {
                            var selectedRows = dt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item.country_id);
                            });
                            // console.log(selectedIds);
                            if (selectedIds.length > 0){
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link('localisation/country_city/delete') }}',
                                        type: 'post',
                                        data: {id: selectedIds},
                                        success: function(){
                                            reloadDT();
                                        }
                                    });
                                });
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: '<i class="icon-drawer-out"></i>',
                        className: 'btn btn-default btn-export',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                    {
                        extend: 'colvis',
                        text: '<i class="icon-grid3"></i>',
                        className: 'btn btn-default btn-colvis',
                        columns: [1, 2, 3]
                    },
                    {
                        text: `<i class="fa fa-eye-slash"></i>`,
                        className: 'btn btn-default btn-disable',
                        action: function (e, dt, node, congig) {
                            $('#enable-disable').modal('show');
                        }
                    }
                ],

                columns: [
                    {
                        title:`<input type="checkbox" class="styled" onchange='toggleSelectAll(this);'>`,
                        orderable: false,
                        data: "country_id",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "name",
                        render: function (data, type, row) {
                            return `<a href="{{ link('localisation/country_city/update') }}?country_id=${row['country_id']}">${row['name']}</a>`;
                        }
                    },
                    {data: "iso_code_2"},
                    {data: "iso_code_3"},
                    {data: "status"},
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 4,
                        orderable: false,
                        render: function (data, type, row) {
                            var status = (data == "1" ? 'checked="checked"' : '');
                            return statusSwitch(row.country_id, status);
                        }
                    },
                    {
                        targets: 5,
                        orderable: false,
                        render: function (data, type, row) {
                            return `<ul class="icons-list pull-right">
                                    <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-menu9"></i>
                                        </a>
                                        <ul class="dropdown-menu dropdown-menu-right">
                                            <li><a href="{{ link('localisation/country_city/update') }}?country_id=${row['country_id']}"><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>
                                            <li><a onclick="removeItem(${row['country_id']})"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>
                                        </ul>
                                    </li>
                                </ul>
                            `;
                        }
                    },
                ]
            });

            $(".bulk-delete").attr({
                "data-popup": "tooltip",
                "title": locales['button_delete']
            });
            $(".btn-export").attr({
                "data-popup": "tooltip",
                "title": locales['button_export']
            });
            $(".btn-colvis").attr({
                "data-popup": "tooltip",
                "title": locales['button_colvis']
            });

            $(".btn-insert").attr({
                "data-popup": "tooltip",
                "title": locales['button_insert']
            });

            $(".btn-disable").attr({
                "data-popup": "tooltip",
                "title": locales['button_disable']
            });

            $('[data-popup="tooltip"]').tooltip();

            // On each draw, loop over the `detailRows` array and show any child rows
            dt.on('draw', function () {
                if (Array.prototype.forEach) {
                    var elems = Array.prototype.slice.call(document.querySelectorAll('.switchery'));
                    elems.forEach(function(html) {
                        var switchery = new Switchery(html);
                        //debugger;
                    });
                }
                else {
                    var elems = document.querySelectorAll('.switchery');
                    for (var i = 0; i < elems.length; i++) {
                        var switchery = new Switchery(elems[i]);
                    }
                }
                $(".switchery").on('change', function(e) {
                    var status = this.checked ? locales['switch_text_enabled'] : locales['switch_text_disabled'];
                    $(this).parent().children(".switchery-status").text(status);
                });
            });

            dt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
                .on( 'deselect', function ( e, objDT, type, indexes ) {
                    if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                })
                .on( 'search.dt', function (e, objDT) {
                    if ( dt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });
            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });

            {# ---------------------------------------------------------- #}

            // CITIES
            citiesdt = $('#datatables_zone').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                searchDelay: 1500, //1second reducing ajax calls for search every char user type
                deferRender: true,
                pageLength: 25,
                pagingType: 'full',
                language: locales['dt_language'],
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                drawCallback: function () {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                },
                preDrawCallback: function() {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                },
                "ajax": {
                    url: "{{ link('localisation/zone/handler') }}",
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: "<i class='icon-plus3'></i>",
                        className: 'btn btn-default btn-insert',
                        action: function(event) {
                            window.location.href = "{{ link('localisation/zone/insert') }}";
                        }
                    },
                    {
                        text: "<i class='icon-trash'></i>",
                        className: 'btn btn-default bulk-delete disabled',
                        action: function(e, citiesdt, node, config) {
                            var selectedRows = citiesdt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item[0]);
                            });
                            // console.log(selectedIds);
                            if (selectedIds.length > 0){
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link("localisation/zone/delete") }}',
                                        type: 'post',
                                        data: {zone_ids: selectedIds},
                                        success: function(resp){
                                            console.log(resp);
                                            reloadDT();
                                        }
                                    });
                                });
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: '<i class="icon-drawer-out"></i>',
                        className: 'btn btn-default btn-export',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                    {
                        extend: 'colvis',
                        text: '<i class="icon-grid3"></i>',
                        className: 'btn btn-default btn-colvis',
                        columns: [1, 2, 3]
                    }
                ],

                columns: [
                    {
                        title:'<input type="checkbox" class="styled" onchange="toggleSelectAllCities(this);">',
                        orderable: false,
                        data: "0",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "2",
                        render: function (data, type, row) {
                            return `<a href="{{ link('localisation/zone/update') }}?zone_id=${row['0']}">${row['2']}</a>`;
                        }
                    },
                    {data: "3"},
                    {data: "4"},
                    {data: "5"}
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 4,
                        orderable: false,
                        render: function (data, type, row) {
                            var status = (data == "1" ? 'checked="checked"' : '');
                            return statusSwitch(row['0'], status, 'city');
                        }
                    },
                    {
                        targets: 5,
                        orderable: false,
                        render: function(data, type, row) {
                            return `<ul class="icons-list pull-right">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-right">
                                    <li><a href="{{ link('localisation/zone/update') }}?zone_id=${row['0']}"><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>
                                    <li><a onclick="removeZone(`+row[0]+`)"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>
                                </ul>
                            </li>
                        </ul>
                    `;
                        }
                    }
                ]
            });
            {# ---------------------------------------------------------- #}

            // Areas
            areasdt = $('#datatables_areas').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                searchDelay: 1500, //1second reducing ajax calls for search every char user type
                deferRender: true,
                pageLength: 25,
                pagingType: 'full',
                language: locales['dt_language'],
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                drawCallback: function () {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
                },
                preDrawCallback: function() {
                    $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
                },
                "ajax": {
                    url: "{{ link('localisation/area/handler') }}",
                    type: "post",
                    error: function (e,m,l) {
                        $(".datatables_country-error").html("");
                        $("#datatables_country").append('<tbody class="datatables_country-error"><tr><th colspan="3">No data found in the server</th></tr></tbody>');
                        $("#datatables_country_processing").css("display", "none");
                    }
                },
                buttons: [
                    {
                        text: "<i class='icon-plus3'></i>",
                        className: 'btn btn-default btn-insert',
                        action: function(event) {
                            window.location.href = "{{ link('localisation/area/insert') }}";
                        }
                    },
                    {
                        text: "<i class='icon-trash'></i>",
                        className: 'btn btn-default bulk-delete disabled',
                        action: function(e, areasdt, node, config) {
                            var selectedRows = areasdt.rows('.selected').data();
                            var selectedIds = [];
                            selectedRows.each(function(item) {
                                selectedIds.push(item[0]);
                            });
                            // console.log(selectedIds);
                            if (selectedIds.length > 0){
                                confirmMessage(function () {
                                    $.ajax({
                                        url: '{{ link("localisation/area/delete") }}',
                                        type: 'post',
                                        data: {area_ids: selectedIds},
                                        success: function(resp){
                                            console.log(resp);
                                            reloadDT();
                                        }
                                    });
                                });
                            }
                        }
                    },
                    {
                        extend: 'collection',
                        text: '<i class="icon-drawer-out"></i>',
                        className: 'btn btn-default btn-export',
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                text: locales['buttons']['copy'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: locales['buttons']['export2csv'],
                                fieldSeparator: ',',
                                extension: '.csv',
                                bom: "true",
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: locales['buttons']['export2excel'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: locales['buttons']['export2pdf'],
                                exportOptions: {
                                    columns: ':visible'
                                }
                            }
                        ]
                    },
                    {
                        extend: 'colvis',
                        text: '<i class="icon-grid3"></i>',
                        className: 'btn btn-default btn-colvis',
                        columns: [1, 2, 3]
                    }
                ],

                columns: [
                    {
                        title:'<input type="checkbox" class="styled" onchange="toggleSelectAllAreas(this);">',
                        orderable: false,
                        data: "0",
                        width: "50px",
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="select-checkbox">`;
                        }
                    },
                    {
                        data: "2",
                        render: function (data, type, row) {
                            return `<a href="{{ link('localisation/area/update') }}?area_id=${row['0']}">${row['2']}</a>`;
                        }
                    },
                    {data: "3"},
                    {data: "4"},
                    {data: "5"}
                ],
                "order": [[1, "asc"]],
                columnDefs: [
                    {
                        targets: 4,
                        orderable: false,
                        render: function (data, type, row) {
                            var status = (data == "1" ? 'checked="checked"' : '');
                            return statusSwitch(row['0'], status, 'area');
                        }
                    },
                    {
                        targets: 5,
                        orderable: false,
                        render: function(data, type, row) {
                            return `<ul class="icons-list pull-right">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-right">
                                    <li><a href="{{ link('localisation/area/update') }}?area_id=${row['0']}"><i class='icon-pencil7'></i> ${locales['button_edit']}</a></li>
                                    <li><a onclick="removeArea(`+row[0]+`)"><i class='icon-trash'></i> ${locales['button_delete']}</a></li>
                                </ul>
                            </li>
                        </ul>
                    `;
                        }
                    },
                    {
                        targets: 5,
                        orderable: false,
                    }
                ]
            });

            $(".bulk-delete").attr({
                "data-popup": "tooltip",
                "title": locales['button_delete']
            });
            $(".btn-export").attr({
                "data-popup": "tooltip",
                "title": locales['button_export']
            });
            $(".btn-colvis").attr({
                "data-popup": "tooltip",
                "title": locales['button_colvis']
            });

            $(".btn-insert").attr({
                "data-popup": "tooltip",
                "title": locales['button_insert']
            });

            $('[data-popup="tooltip"]').tooltip();

            // On each draw, loop over the `detailRows` array and show any child rows
            citiesdt.on('draw', function () {
                $(".switch").bootstrapSwitch();
                if (Array.prototype.forEach) {
                    var elems = Array.prototype.slice.call(document.querySelectorAll('.switchery'));
                    elems.forEach(function(html) {
                        var switchery = new Switchery(html);
                        //debugger;
                    });
                }
                else {
                    var elems = document.querySelectorAll('.switchery');
                    for (var i = 0; i < elems.length; i++) {
                        var switchery = new Switchery(elems[i]);
                    }
                }
                $(".switchery").on('change', function(e) {
                    var status = this.checked ? locales['switch_text_enabled'] : locales['switch_text_disabled'];
                    $(this).parent().children(".switchery-status").text(status);
                });
            });
            
            citiesdt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
                .on( 'deselect', function ( e, objDT, type, indexes ) {
                    if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                })
                .on( 'search.dt', function (e, objDT) {
                    if ( citiesdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                });
            
            areasdt.on('draw', function () {
                $(".switch").bootstrapSwitch();
                if (Array.prototype.forEach) {
                    var elems = Array.prototype.slice.call(document.querySelectorAll('.switchery'));
                    elems.forEach(function(html) {
                        var switchery = new Switchery(html);
                        //debugger;
                    });
                }
                else {
                    var elems = document.querySelectorAll('.switchery');
                    for (var i = 0; i < elems.length; i++) {
                        var switchery = new Switchery(elems[i]);
                    }
                }
                $(".switchery").on('change', function(e) {
                    var status = this.checked ? locales['switch_text_enabled'] : locales['switch_text_disabled'];
                    $(this).parent().children(".switchery-status").text(status);
                });
            });

            areasdt.on( 'select', function ( e, objDT, type, indexes ) {
                if ( areasdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                else $(".bulk-delete").addClass('disabled');
            })
                .on( 'deselect', function ( e, objDT, type, indexes ) {
                    if ( areasdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                })
                .on( 'search.dt', function (e, objDT) {
                    if ( areasdt.rows( '.selected' ).any() ) $(".bulk-delete").removeClass('disabled');
                    else $(".bulk-delete").addClass('disabled');
                });

            $('.dataTables_length select').select2({
                minimumResultsForSearch: Infinity,
                width: 'auto'
            });

            $(".styled, .multiselect-container input").uniform({
                radioClass: 'choice'
            });
        });

        $(document).on('submit', '.form', function(){
            reloadDT();
        });

        function removeItem(id) {
            confirmMessage(function() {
                ajax("{{ link('localisation/country_city/delete') }}", {id: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function removeCity(id) {
            confirmMessage(function() {
                ajax("{{ link('localisation/zone/delete') }}", {zone_ids: id}, function (res) {
                    reloadDT();
                });
            });
        }
        
        function removeArea(id) {
            confirmMessage(function() {
                ajax("{{ link('localisation/area/delete') }}", {area_ids: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function removeZone(id) {
            confirmMessage(function() {
                ajax("{{ link('localisation/zone/delete') }}", {zone_ids: id}, function (res) {
                    reloadDT();
                });
            });
        }

        function reloadDT() {
            dt.ajax.reload();
            citiesdt.ajax.reload();
            areasdt.ajax.reload();
        }

        function toggleSelectAll(checkbox) {
            if (checkbox.checked == true) {
                dt.rows().select();
            } else {
                dt.rows().deselect();
            }
        }

        function toggleSelectAllCities(checkbox) {
            if (checkbox.checked == true) {
                citiesdt.rows().select();
            } else {
                citiesdt.rows().deselect();
            }
        }
        
        function toggleSelectAllAreas(checkbox) {
            if (checkbox.checked == true) {
                areasdt.rows().select();
            } else {
                areasdt.rows().deselect();
            }
        }
        
        function statusSwitch(id, status, type='country') {
            return `<div class="checkbox checkbox-switchery  no-margin">
                    <label>
                        <input type="checkbox" data-on-text="sameh" data-off-text="Amr" onchange="changeStatus(` + id + `, this.checked,'`+type+`');" class="switchery" ` + status + `>
                        <span class="switchery-status">` + (status ? locales['switch_text_enabled'] : locales['switch_text_disabled']) + `</span>
                    </label>
                </div>`;
        }

        function changeStatus(id, status, type='country') {
            var newStatus = (status ? 1 : 0);
            var link='';
            if(type == 'country')
                link= "{{ link('localisation/country_city/dtCountryUpdateStatus') }}";
            else
                link= "{{ link('localisation/zone/dtCityUpdateStatus') }}";
            $.ajax({
                url: link,
                data: {id: id, status: newStatus},
                dataType: 'JSON',
                method: 'POST',
                success: function (returnResult) {
                    if (returnResult.success == '1') {
                        notify('', 'success', returnResult.success_msg);
                        if (type =='country') {
                            reloadDT();
                        }
                    } else {
                        if(returnResult.errors){
                            errorsObj = returnResult.errors;
                        }else if(returnResult.error){
                            errorsObj = returnResult.error;
                        }

                        if(errorsObj.error) {
                            displayErrors(errorsObj.error);
                        } else {
                            var errorMsg = errorsObj.warning;
                            for(var el in errorsObj) {
                                if($('#' + el + '-group').length <= 0 && el != "warning" && el != "error") {
                                    errorMsg += "<br/> - " + errorsObj[el];
                                }
                            }
                            if (errorMsg && errorMsg != "") {
                                displayErrors(errorMsg);
                            }
                            applyFormErrors(errorsObj);
                        }
                    }
                }
            });
        }

        function checkResetInput() {
            let resetInput = $('#resetInput').val();

            if (resetInput == 'reset') {


                $('#resetButton').attr('disabled', false);
            } else {
                $('#resetButton').attr('disabled', true);
            }
        }

        function resetCountriesAndCities()
        {
            let resetInput = $('#resetInput').val();

            if (resetInput == 'reset') {
                $.ajax({
                    url: '{{ link('localisation/country_city/resetCountriesAndCities') }}',
                    type: "post",
                    async: true,
                    success: function (data) {
                        data = JSON.parse(data);
                        if (data['success'] == true) {
                            location.reload();
                        } else {
                            alert('failed');
                        }
                    }
                })
            }
        }
    </script>


{% endblock scripts %}

